// This makes the controls inherit some of the color from the background making them fit in better
.main-nowPlayingView-lyricsControls,
.main-lyricsCinema-controls {
	mix-blend-mode: overlay;
}

aside:has(.main-nowPlayingView-section) {
	.main-nowPlayingView-content {
		background: transparent;
	}

	.lyrics-background .main-trackInfo-artists {
		opacity: 0.75;
		filter: brightness(1.15);
	}

	.main-nowPlayingView-coverArt {
		opacity: 0.85;
		box-shadow: #00000045 0 9px 20px 0px;
	}

	.main-nowPlayingView-section {
		background-color: var(--background-tinted-base) !important;
	}
}


// Improves scroll-bar
.os-host:has(.lyrics-background),
#lyrics-cinema,
.Root__main-view:has(.lyrics-background) {
	.os-scrollbar {
		padding: 5px;

		.os-scrollbar-handle {
			mix-blend-mode: overlay;
			background-color: rgba(252, 249, 249, 0.117) !important;
		}
	}
}

// Full-screen CSS
.os-viewport {
	.lyrics-lyrics-background {
		background: transparent;
	}

	.lyrics-lyrics-container {
		&.lyrics-lyrics-coverTopBar {
			margin-top: 7.5vh;
		}
	}
}

// Lyric-Plus CSS
.lyrics-lyricsContainer-LyricsBackground {
	background-color: transparent !important;
	background-image: none !important;
}

#main:has(.under-main-view.lyrics-background) .Root__top-bar {
	mix-blend-mode: screen;
}

// This is the entire lyrics configuration used to create the gradient backgrounds
.lyrics-background {
	// This is the overarching container, the parent of the container class
	overflow: hidden;
	position: static;

	// This is needed so that the gradient-background can be visible
	&.main-nowPlayingView-sectionHeaderSpacing.main-nowPlayingView-lyricsGradient {
		background: transparent;
	}

	// These are full-screen background specific classes to make the gradient-background work/show properly
	&.os-viewport:not(:has(.main-nowPlayingView-content)) {
		overflow: initial;
	}

	#main:not(:has(.lyrics-lyricsContainer-LyricsBackground)) &.under-main-view>&-container {
		max-width: 35%;
		max-height: 30%;

		scale: 290% 340%;
		transform-origin: left top;
	}

	#main:has(.lyrics-lyricsContainer-LyricsBackground) &.under-main-view>&-container {
		max-width: 25%;
		max-height: 40%;

		scale: 400% 250%;
		transform-origin: left top;
	}

	.BeautifulLyricsPage &-container {
		max-width: 35%;
		max-height: 55%;

		scale: 290% 185%;
		transform-origin: left top;

		filter: saturate(2.5) brightness(0.65);
	}

	#main:has(#lyrics-cinema .lyrics-lyrics-background) &.under-main-view &-container {
		z-index: 1;
	}

	// These are right-side card background specific classes to adjust for contrast issues
	&.os-padding:has(.main-nowPlayingView-content) &-container {
		border-radius: 8px;
		filter: saturate(2) brightness(0.7);
	}

	/*
		The idea behind this is to create a gradient-background that resembles Apple Music.

		We could technically simulate blob-merging of these colors and extract colors out of the
		cover-art. However - that is ridiculously expensive computationaly - and more importantly;
		I don't want to extract the colors from the cover-art in the first place.

		The easier solution is to use the cover-art as an image and blur it. To simulate blob-merging
		we have two circles with the image (two images cropped circularly) blurred significantly. We then
		apply a blend-mode to one of the circles and layer it on top. This helps sell the illusion that
		these colors are merging in blobs.
	*/

	// As the name suggests, this contains the color/back images - which make up the gradient itself
	&-container {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		pointer-events: none;
		overflow: hidden;

		filter: saturate(1.5) brightness(0.8);
	}

	// Sharable properties
	&-color,
	&-back,
	&-back-center {
		/* This is to align our img element */
		position: absolute;
		width: 200%;
		/*aspect-ratio: 1/1;*/
		animation: rotate 35s linear infinite;

		/* Align our image to the center of our div */
		/*img, canvas {
			position: absolute;
			top: 50%;
			left: 50%;
			translate: -50% -50%;
		}*/

		filter: blur(40px);
		border-radius: 100em;
	}

	// The primary image which gives the blending effect it's illusional property
	&-color {
		right: 0;
		top: 0;
		z-index: 10;

		/*
			This was previously Luminosity.

			The issue with pretty much every blend mode is that random-clipping will happen
			on the smaller lyric components (minified and small). This clipping usually would show up
			as rounded rectangles that showed the background color and not the blurred colors; kind of
			like a random mask was applied to it.

			Revert is the only blend mode that doesn't have this issue. There is no visual trade-off and
			arguably looks better than Luminosity.

			Color-dodge is also another cool option - unlike the other two it's not like blob-merging
			and is more like a trippy but satisfying effect - unfortuantely; it suffers from the same issue
			as Luminosity.
		*/
		mix-blend-mode: revert;
	}

	// Additional image to cover space that the primary image doesn't cover (and to develop blob-blending)
	&-back {
		left: 0;
		bottom: 0;
		z-index: 1;
		animation-direction: reverse;
	}

	// Final image to cover the center
	&-back-center {
		z-index: 0;

		width: 300%;
		right: -50%;
		top: -20%;

		animation-direction: reverse;
	}
}

@keyframes rotate {
	0% {
		transform: rotate(0deg);
	}

	100% {
		transform: rotate(360deg);
	}
}

:root {
	--beautiful-lyrics-random-degree: 258deg;
}

@keyframes rotate {
	0% {
		transform: rotate(var(--beautiful-lyrics-random-degree));
	}

	100% {
		transform: rotate(calc(var(--beautiful-lyrics-random-degree) + 360deg));
	}
}