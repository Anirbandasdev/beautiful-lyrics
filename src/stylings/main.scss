// This makes the controls inherit some of the color from the background making them fit in better
.main-nowPlayingView-lyricsControls, .main-lyricsCinema-controls /*, .main-nowPlayingView-lyricsTitle button*/ {
	mix-blend-mode: overlay;
}

// We need to override the hover effect since we changed the way the text is filled-in
.lyric:hover {
	text-shadow: 0 0 0px var(--lyrics-color-active) !important;
}

// When the active text grows in size we want more space between it and the surrounding lines
.lyrics-lyricsContent-active {
    margin-top: 0.25em;
    margin-bottom: 0.25em;
}

// Right-card styling
.lyrics-background .main-trackInfo-artists {
	opacity: 0.75;
	filter: brightness(1.15);
}

.main-nowPlayingView-coverArt {
	opacity: 0.85;
    box-shadow: #00000045 0 9px 20px 0px;
}

.main-nowPlayingView-section {
	background-color: var(--background-tinted-base) !important;
}


// Improves scroll-bar
.os-host:has(.lyrics-background) .os-scrollbar {
	padding: 5px;

	.os-scrollbar-handle {
		mix-blend-mode: overlay;
		/*background-color: rgb(11 11 11 / 35%) !important;*/
		background-color: rgba(252, 249, 249, 0.117) !important;
	}
}

/*
	We have to override the unsung lyric color since Spotifys black text doesn't work too well
	with gradient-color backgrounds. It works with the solid-color background because the contrast
	between the unsung text, the sung/active text, and the background itself is completely balanced.

	With gradient backgrounds the contrast differs in many different places and black text creates
	a stark inbalance in contrast between the white text and the varying contrast points in the gradient
	background.

	The color chosen is close to that of the already sung lyrics but fainter to create a more balanced
	and distinguishable contrast between the sung and unsung lyrics.
*/
.lyrics-lyrics-container, .main-nowPlayingView-section {
	--lyrics-color-inactive: rgb(240 240 240 / 51%) !important;
}

// This is the entire lyrics configuration used to create the gradient backgrounds
.lyrics-background { // This is the overarching container, the parent of the container class
	overflow: hidden;
	position: relative;

	// This is needed so that the gradient-background can be visible
	&.main-nowPlayingView-sectionHeaderSpacing.main-nowPlayingView-lyricsGradient, &.os-viewport .lyrics-lyrics-background {
		background-color: rgba(0, 0, 0, 0);
	}

	&.os-viewport, &.os-padding {
		position: absolute;
	}

	// These are full-screen background specific classes to make the gradient-background work/show properly
	&.os-viewport:not(:has(.main-nowPlayingView-content)) {
		overflow: visible;
	}
	&.os-viewport:not(:has(.main-nowPlayingView-content)) > &-container {
		position: sticky;

		max-width: 35%;
		max-height: 30%;

		scale: 290% 340%;
		transform-origin: left top;

		margin-bottom: -18vh;
	}

	// These are right-side card background specific classes to adjust for contrast issues
	&.os-padding:has(.main-nowPlayingView-content) &-container {
		filter: saturate(2) brightness(0.7);
	}

	/*
		The idea behind this is to create a gradient-background that resembles Apple Music.

		We could technically simulate blob-merging of these colors and extract colors out of the
		cover-art. However - that is ridiculously expensive computationaly - and more importantly;
		I don't want to extract the colors from the cover-art in the first place.

		The easier solution is to use the cover-art as an image and blur it. To simulate blob-merging
		we have two circles with the image (two images cropped circularly) blurred significantly. We then
		apply a blend-mode to one of the circles and layer it on top. This helps sell the illusion that
		these colors are merging in blobs.
	*/

	// As the name suggests, this contains the color/back images - which make up the gradient itself
	&-container {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		pointer-events: none;
		z-index: -1;
		overflow: hidden;
		border-radius: var(--border-radius-1);

		filter: saturate(1.5) brightness(0.8);
	}

	// Sharable properties
	&-color, &-back {
		width: 200%;
		position: absolute;
		border-radius: 100em;
		animation: rotate 35s linear infinite;
	}

	// The primary image which gives the blending effect it's illusional property
	&-color {
		right: 0;
		top: 0;
		filter: blur(40px);
		z-index: 10;

		/*
			This was previously Luminosity.

			The issue with pretty much every blend mode is that random-clipping will happen
			on the smaller lyric components (minified and small). This clipping usually would show up
			as rounded rectangles that showed the background color and not the blurred colors; kind of
			like a random mask was applied to it.

			Revert is the only blend mode that doesn't have this issue. There is no visual trade-off and
			arguably looks better than Luminosity.

			Color-dodge is also another cool option - unlike the other two it's not like blob-merging
			and is more like a trippy but satisfying effect - unfortuantely; it suffers from the same issue
			as Luminosity.
		*/
		mix-blend-mode: revert;
	}

	// Additional image to cover space that the primary image doesn't cover (and to develop blob-blending)
	&-back {
		left: 0;
		bottom: 0;
		filter: blur(40px);
		z-index: 1;
		animation-direction: reverse;
	}
}

@keyframes rotate {
	0% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(360deg);
	}
}

:root {
	--beautiful-lyrics-random-degree: 258deg;
}

@keyframes rotate {
	0% {
		transform: rotate(var(--beautiful-lyrics-random-degree));
	}
	100% {
		transform: rotate(calc(var(--beautiful-lyrics-random-degree) + 360deg));
	}
}
